'use client';

import { useState } from 'react';
import { Plus, MessageSquare, Trash2, Menu, X, Edit3, Sparkles } from 'lucide-react';
import { Conversation } from '@/types/playground';
import { ConversationStorage } from '@/lib/storage';

interface ConversationSidebarProps {
  conversations: Conversation[];
  currentConversationId: string | null;
  onSelectConversation: (id: string) => void;
  onNewConversation: () => void;
  onDeleteConversation: (id: string) => void;
  onToggleSidebar: () => void;
}

export function ConversationSidebar({
  conversations,
  currentConversationId,
  onSelectConversation,
  onNewConversation,
  onDeleteConversation,
  onToggleSidebar
}: ConversationSidebarProps) {
  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null);

  const handleDeleteClick = (e: React.MouseEvent, conversationId: string) => {
    e.stopPropagation();
    setDeleteConfirm(conversationId);
  };

  const handleConfirmDelete = (conversationId: string) => {
    onDeleteConversation(conversationId);
    setDeleteConfirm(null);
  };

  const handleCancelDelete = () => {
    setDeleteConfirm(null);
  };

  const formatLastMessage = (conversation: Conversation): string => {
    const lastMessage = conversation.messages[conversation.messages.length - 1];
    if (!lastMessage) return 'No messages';
    
    const content = lastMessage.content;
    return content.length > 50 ? content.substring(0, 47) + '...' : content;
  };

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

    if (diffHours < 1) {
      return 'Just now';
    } else if (diffHours < 24) {
      return `${diffHours}h ago`;
    } else if (diffDays < 7) {
      return `${diffDays}d ago`;
    } else {
      return date.toLocaleDateString();
    }
  };

  const isAutoGeneratedTitle = (title: string): boolean => {
    return title !== 'New Conversation' && title.length <= 50 && !title.includes('?') && !title.includes('!');
  };

  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <div className="flex items-center gap-2">
          <button
            onClick={onToggleSidebar}
            className="p-1 rounded-md hover:bg-gray-100 lg:hidden"
          >
            <X className="w-5 h-5" />
          </button>
          <h2 className="font-semibold text-gray-900">Conversations</h2>
        </div>
        <button
          onClick={onNewConversation}
          className="p-2 rounded-lg bg-orange-600 text-white hover:bg-orange-700 transition-colors"
          title="New conversation"
        >
          <Plus className="w-4 h-4" />
        </button>
      </div>

      {/* Conversation List */}
      <div className="flex-1 overflow-y-auto">
        {conversations.length === 0 ? (
          <div className="p-4 text-center text-gray-500">
            <MessageSquare className="w-8 h-8 mx-auto mb-2 text-gray-300" />
            <p className="text-sm">No conversations yet</p>
            <p className="text-xs mt-1">Start a new conversation to begin</p>
          </div>
        ) : (
          <div className="space-y-1 p-2">
            {conversations.map((conversation) => (
              <div key={conversation.id} className="relative group">
                <div
                  onClick={() => onSelectConversation(conversation.id)}
                  className={`w-full text-left p-3 rounded-lg transition-colors cursor-pointer ${
                    currentConversationId === conversation.id
                      ? 'bg-orange-50 border border-orange-200'
                      : 'hover:bg-gray-50 border border-transparent'
                  }`}
                >
                  <div className="flex items-start justify-between gap-2">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-1 mb-1">
                        {/* {conversation.title === 'New Conversation' && (
                          <Sparkles className="w-3 h-3 text-orange-500 flex-shrink-0" />
                        )}
                        {isAutoGeneratedTitle(conversation.title) && conversation.title !== 'New Conversation' && (
                          <Edit3 className="w-3 h-3 text-blue-500 flex-shrink-0" />
                        )} */}
                        <h3 className="font-medium text-sm text-gray-900 truncate">
                          {conversation.title}
                        </h3>
                      </div>
                      <p className="text-xs text-gray-500 mt-1 truncate">
                        {formatLastMessage(conversation)}
                      </p>
                      <p className="text-xs text-gray-400 mt-1">
                        {formatDate(conversation.updatedAt)}
                      </p>
                    </div>
                    <button
                      onClick={(e) => handleDeleteClick(e, conversation.id)}
                      className="opacity-0 group-hover:opacity-100 p-1 rounded hover:bg-red-50 transition-all flex-shrink-0"
                      title="Delete conversation"
                    >
                      <Trash2 className="w-4 h-4 text-red-500" />
                    </button>
                  </div>
                </div>

                {/* Delete Confirmation */}
                {deleteConfirm === conversation.id && (
                  <div className="absolute inset-0 bg-white rounded-lg border border-red-200 p-3 z-10">
                    <p className="text-sm font-medium text-gray-900 mb-2">
                      Delete this conversation?
                    </p>
                    <p className="text-xs text-gray-600 mb-3">
                      This action cannot be undone.
                    </p>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleConfirmDelete(conversation.id)}
                        className="flex-1 px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 transition-colors"
                      >
                        Delete
                      </button>
                      <button
                        onClick={handleCancelDelete}
                        className="flex-1 px-2 py-1 bg-gray-200 text-gray-700 text-xs rounded hover:bg-gray-300 transition-colors"
                      >
                        Cancel
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Footer */}
      <div className="p-4 border-t border-gray-200">
        <div className="text-xs text-gray-500 text-center">
          <p>{conversations.length} conversation{conversations.length !== 1 ? 's' : ''}</p>
          <p className="mt-1">Stored locally in your browser</p>
        </div>
      </div>

    </div>
  );
}
